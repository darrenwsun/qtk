feature Select from a segmented table based on given criteria, groupings, and column mappings, in a similar format to functional select.

  before each
    .qtk.import.loadModule["tbl";`qtk];
    .qutils.hdbRoot:"/tmp/hdb_select_segmented";
    .qutils.segment1:"/tmp/hdb_select_segment1";
    .qutils.segment2:"/tmp/hdb_select_segment2";
    .Q.dd[hsym `$.qutils.hdbRoot; `par.txt] 0: (.qutils.segment1; .qutils.segment2);
    .qutils.tabRef:(hsym `$.qutils.hdbRoot; `date; `SegmentedTable);
    .qtk.tbl.create[.qutils.tabRef; ([] date:2022.01.01 2022.01.02 2022.01.01; c1:("aa";"bb";"aa"); c2:`a`b`a)];
    system "l ",.qutils.hdbRoot;

  after each
    .qtk.tbl.drop `SegmentedTable;
    .qtk.os.rmtree each (.qutils.hdbRoot; .qutils.segment1; .qutils.segment2);

  should select from a segmented table based on given criteria, groupings, and column mappings.
    expect proper data specified by criteria
      .qu.result:.qtk.tbl.select[SegmentedTable; enlist(=;`c2;enlist `b); 0b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.02; c1:enlist "bb"; c2:`b)]
    expect all data without criteria
      .qu.result:.qtk.tbl.select[SegmentedTable; (); 0b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01 2022.01.01 2022.01.02; c1:("aa";"aa";"bb"); c2:`a`a`b)]
    expect proper data by groupings
      .qu.result:.qtk.tbl.select[SegmentedTable; (); enlist[`c2]!enlist[`c2]; ()];
      .qu.compare[.qu.result; `c2 xkey .Q.en[`:.; ] ([] date:2022.01.01 2022.01.02; c1:("aa";"bb"); c2:`a`b)]
    expect proper distinct data
      .qu.result:.qtk.tbl.select[SegmentedTable; (); 1b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01 2022.01.02; c1:("aa";"bb"); c2:`a`b)]
    expect proper columns
      .qu.result:.qtk.tbl.select[SegmentedTable; (); 0b; enlist[`c3]!enlist[`c2]];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] c3:`a`a`b)]

  should select from a segmented table, when the table is specified by name.
    expect proper data specified by criteria
      .qu.result:.qtk.tbl.select[`SegmentedTable; enlist(=;`c2;enlist `b); 0b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.02; c1:enlist "bb"; c2:`b)]
    expect all data without criteria
      .qu.result:.qtk.tbl.select[`SegmentedTable; (); 0b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01 2022.01.01 2022.01.02; c1:("aa";"aa";"bb"); c2:`a`a`b)]
    expect proper data by groupings
      .qu.result:.qtk.tbl.select[`SegmentedTable; (); enlist[`c2]!enlist[`c2]; ()];
      .qu.compare[.qu.result; `c2 xkey .Q.en[`:.; ] ([] date:2022.01.01 2022.01.02; c1:("aa";"bb"); c2:`a`b)]
    expect proper distinct data
      .qu.result:.qtk.tbl.select[`SegmentedTable; (); 1b; ()];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01 2022.01.02; c1:("aa";"bb"); c2:`a`b)]
    expect proper columns
      .qu.result:.qtk.tbl.select[`SegmentedTable; (); 0b; enlist[`c3]!enlist[`c2]];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] c3:`a`a`b)]
