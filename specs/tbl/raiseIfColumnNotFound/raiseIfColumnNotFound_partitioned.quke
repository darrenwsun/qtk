feature Check if a column exists in a partitioned table.

  before each
    .qtk.import.loadModule["tbl";`qtk];
    .qutils.hdbRoot:"/tmp/hdb_raiseIfColumnNotFound_partitioned";
    .qutils.tabRef:(hsym `$.qutils.hdbRoot; `date; `PartitionedTable);
    .qtk.tbl.create[.qutils.tabRef; ([] date:2022.01.01 2022.01.02; c1:1 2; c2:`a`b)];
    system "l ",.qutils.hdbRoot;

  after each
    .qtk.tbl.drop .qutils.tabRef;
    .qtk.os.rmtree .qutils.hdbRoot;

  should raise "ColumnNotFoundError" if a column is not found.
    expect error "ColumnNotFoundError: c3".
      .qu.compare[
        .[.qtk.tbl.raiseIfColumnNotFound; (PartitionedTable;`c3); {x}];
        "ColumnNotFoundError: c3"
      ]
    expect error "ColumnNotFoundError: c3" when the table is passed by name.
      .qu.compare[
        .[.qtk.tbl.raiseIfColumnNotFound; (`PartitionedTable;`c3); {x}];
        "ColumnNotFoundError: c3 on PartitionedTable"
      ]
    expect error "ColumnNotFoundError: c3" when the table is passed by partitioned table ID.
      .qu.compare[
        .[.qtk.tbl.raiseIfColumnNotFound; (.qutils.tabRef;`c3); {x}];
        "ColumnNotFoundError: c3 on ",string ` sv .qutils.tabRef
      ]

  should not raise "ColumnNotFoundError" if a column is found.
    expect no error.
      .qu.compare[
        .qtk.tbl.raiseIfColumnNotFound[PartitionedTable;`c1];
        (::)
      ]
    expect no error.
      .qu.compare[
        .qtk.tbl.raiseIfColumnNotFound[`PartitionedTable;`c1];
        (::)
      ]
    expect no error.
      .qu.compare[
        .qtk.tbl.raiseIfColumnNotFound[.qutils.tabRef;`c1];
        (::)
      ]
