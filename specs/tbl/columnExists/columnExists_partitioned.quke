feature Check if a column exists in a partitioned table.

  before each
    .qtk.import.loadModule["tbl";`qtk];
    .qutils.hdbRoot:"/tmp/hdb_columnExists_partitioned";
    PartitionedTable:([] c1:`boolean$(); c2:`long$());
    (hsym `$.qutils.hdbRoot,"/2022.01.01/PartitionedTable/") set PartitionedTable;
    (hsym `$.qutils.hdbRoot,"/2022.01.02/PartitionedTable/") set PartitionedTable;
    system "l ",.qutils.hdbRoot;

  after each
    system "rm -rf ",.qutils.hdbRoot;

  should return `1b` if a column exists.
    expect `1b`.
      .qu.compare[.qtk.tbl.columnExists[`PartitionedTable; `c1]; 1b]

  should return `0b` if a column doesn't exist at all.
    expect `0b`.
      .qu.compare[.qtk.tbl.columnExists[`PartitionedTable; `c3]; 0b]

  should return `0b` if a column doesn't exist in `.d` file in some partition.
    expect `0b`.
      tablePath:.Q.par[`:.; 2022.01.01; `PartitionedTable];
      allColumns:.qtk.db._getColumns tablePath;
      @[tablePath; `.d; :; allColumns except `c1];
      .qtk.db.reload[];
      .qu.compare[.qtk.tbl.columnExists[`PartitionedTable; `c1]; 0b]

  should return `0b` if a column doesn't exist in the filesystem in some partition.
    expect `0b`.
      columnPath:.Q.dd[.Q.par[`:.; 2022.01.01; `PartitionedTable]; `c1];
      .qtk.tbl._deleteColumnData columnPath;
      .qtk.db.reload[];
      .qu.compare[.qtk.tbl.columnExists[`PartitionedTable; `c1]; 0b]
