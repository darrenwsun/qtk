feature Select from a segmented table based on given criteria, groupings, and column mappings, in a similar format to functional select.

  before each
    .qtk.import.loadModule["tbl";`qtk];
    .qtk.test.dbDir:"/tmp/hdb_selectLimit_segmented";
    .qtk.test.seg1:"/tmp/hdb_selectLimit_segment1";
    .qtk.test.seg2:"/tmp/hdb_selectLimit_segment2";
    .Q.dd[hsym `$.qtk.test.dbDir; `par.txt] 0: (.qtk.test.seg1; .qtk.test.seg2);
    .qtk.test.tabRef:(hsym `$.qtk.test.dbDir; `date; `SegmentedTable);
    .qtk.tbl.create[.qtk.test.tabRef; ([] date:2022.01.01 2022.01.02 2022.01.01; c1:("aa";"bb";"cc"); c2:`a`b`a)];
    system "l ",.qtk.test.dbDir;

  after each
    .qtk.tbl.drop `SegmentedTable;
    .qtk.os.rmtree each (.qtk.test.dbDir; .qtk.test.seg1; .qtk.test.seg2);

  should select from a plain table based on given criteria, groupings, and column mappings.
    expect proper data with a positive limit
      .qu.result:.qtk.tbl.selectLimit[`SegmentedTable; enlist(=;`c2;enlist `a); 0b; (); 1];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01; c1:enlist "aa"; c2:`a)]
    expect proper data with a negative limit
      .qu.result:.qtk.tbl.selectLimit[`SegmentedTable; enlist(=;`c2;enlist `a); 0b; (); -1];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01; c1:enlist "cc"; c2:`a)]
    expect proper data with a pair limit
      .qu.result:.qtk.tbl.selectLimit[`SegmentedTable; enlist(=;`c2;enlist `a); 0b; (); 1 1];
      .qu.compare[.qu.result; .Q.en[`:.; ] ([] date:2022.01.01; c1:enlist "cc"; c2:`a)]
